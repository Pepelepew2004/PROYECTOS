install.packages("pacman")
install.packages("tidyverse")
pacman::p_load(tidyverse, magrittr, janitor,fastDummies)
pacman::p_load(tidyverse, magrittr, janitor,fastDummies, readxl)
data <- readxl::read_xlsx("LQL/Apuntes/Bases/Datos Factor Analysis.xlsx")
View(data)
View(data)
rownames(data) <- data$person
data
?read_xlsx()
?read_excel
rownames(data) <- data$person
dt <- readxl::read_xlsx("LQL/Apuntes/Bases/Datos Factor Analysis.xlsx")
dt
rownames(data) <- data$person
dt <- readxl::read_xlsx("LQL/Apuntes/Bases/Datos Factor Analysis.xlsx") %>%
column_to_rownames(person)
###################################################################################################
#  Creador: José Eduardo Martínez Téllez
#  Fecha: Julio-2022
#   Titulo: Fctr Analysis
#  Descr:
###################################################################################################
pacman::p_load(tidyverse, magrittr, janitor,fastDummies, readxl)
# read_data ---------------------------------------------------------------
dt <- readxl::read_xlsx("LQL/Apuntes/Bases/Datos Factor Analysis.xlsx") %>%
column_to_rownames(person)
dt <- readxl::read_xlsx("LQL/Apuntes/Bases/Datos Factor Analysis.xlsx")
dt
data <- as.data.frame(dt[,2:7])
data
row.names(data) <- t(as.vector(dt[,1]))
data <- as.data.frame(dt[,2:7])
t(as.vector(dt[,1]))
dt[,1]
as.vector(dt[,1])
t(as.vector(dt[,1]))
data
row.names(data) <- t(as.vector(dt[,1]))
t(as.vector(dt[,1]))
t(as.vector(dt[,1]))
t(as.characteras.vector(dt[,1])))
as.characteras.vector(dt[,1]))
as.characteras.vector(dt[,1])))
row.names(data) <- t(as.character(as.vector(dt[,1])))
t(as.character(as.vector(dt[,1])))
row.names(data) <- t(as.vector(as.character(dt[,1])))
as.character(dt[,1])
data <- as.data.frame(dt[,2:7])
data
ev <- eigen(cor(data))
ev
ev$values
pacman::p_load(tidyverse, magrittr, janitor,fastDummies, readxl,
psych)
scree(data, pc=FALSE)
ev$values
scree(data, pc=FALSE)
scree_plot <- data.frame( eigen_values = ev$values)
scree_plot
scree_plot <- data.frame( eigen_values = ev$values, number = seq(1:6))
scree_plot
scree_plot <- data.frame(  number = seq(1:6), eigen_values = ev$values)
scree_plot
dta_scree <- data.frame(  number = seq(1:6), eigen_values = ev$values)
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point()+
geom_line()
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point()+
geom_line() +
theme_minimal()
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
theme_minimal()
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_abline( y = 1, shape = 2)+
theme_minimal()
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_abline(x = 0 y = 1, shape = 2)+
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_hline(yintercept = 1, shape = 2)+
theme_minimal()
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_hline(yintercept = 1, color = "red")+
theme_minimal()
?geom_hline
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_hline(yintercept = 1, color = "red")+
labs(x = "Number of factors", y = "Eigen values")+
theme_minimal()
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_hline(yintercept = 1, color = "red")+
labs(x = "Number of factors", y = "Eigen values",
title = "Screeplot")+
theme_minimal()
fa_1 <- fa(data,
nfactors = 3,
fm="pa",
max.iter = 100,
rotate = "oblimin")
pacman::p_load(tidyverse, magrittr, janitor,fastDummies, readxl,
psych, GPArotation)
fa_1 <-   fa(
data,
nfactors = 3,
fm = "pa",
max.iter = 100,
rotate = "oblimin"
)
parallel <- fa.parallel(data)
fa_1 <-   fa(
data,
nfactors = 3,
fm = "pa",
max.iter = 100,
rotate = "oblimin"
)
?fa
fa_2 <-   fa(
data,
nfactors = 3,
fm = "pa",
max.iter = 100,
rotate = "varimax"
)
fa_2
fa_1
fa_2
fa.diagram(fa_1)
.diagram(fa_2)
fa.diagram(fa_2)
library(shiny)
###################################################################################################
#  Creador: José Eduardo Martínez Téllez
#  Fecha: Julio-2022
#   Titulo:  Learning Shiny
#  Descr: Chapter 04 Case Study - Mastering Shiny
###################################################################################################
pacman::p_load(shiny, vroom, tidyverse)
dir.create("neiss")
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/raw/master/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
data <- vroom::vroom("neiss/injuries.tsv.gz")
head(data)
describe(data)
pacman::p_load(shiny, vroom, tidyverse, psych)
describe(data)
summary(data)
pacman::p_load(shiny, vroom, tidyverse, psych,
magrittr, janitor, BBmisc, clipr)
naniar::gg_miss_var(data)
pacman::p_load(shiny, vroom, tidyverse, psych,
magrittr, janitor, BBmisc, clipr, skimr)
skimr::skim(data)
pacman::p_load(shiny, vroom, tidyverse, psych, naniar,
magrittr, janitor, BBmisc, clipr, skimr)
naniar::gg_miss_var(data)
###################################################################################################
#  Creador: José Eduardo Martínez Téllez
#  Fecha: Julio-2022
#   Titulo:  Learning Shiny
#  Descr: Chapter 04 Case Study - Mastering Shiny
###################################################################################################
# Package -----------------------------------------------------------------
pacman::p_load(shiny, vroom, tidyverse, psych, naniar,
magrittr, janitor, BBmisc, clipr, skimr)
# Exporting data --------------------------------------------------------------------
# dir.create("neiss")
# download <- function(name) {
#   url <- "https://github.com/hadley/mastering-shiny/raw/master/neiss/"
#   download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
# }
# download("injuries.tsv.gz")
# download("population.tsv")
# download("products.tsv")
# 1 - Data Injuries -------------------------------------------------------
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
# 1.1 - Quick analysis ----------------------------------------------------------
describe(injuries)
summary(injuries)
skimr::skim(injuries)
naniar::gg_miss_var(injuries)
#  2 - Data Productos -----------------------------------------------------
products <- vroom::vroom("neiss/products.tsv")
# 2.1 - Quick analysis ----------------------------------------------------------
describe(products)
summary(products)
skimr::skim(products)
naniar::gg_miss_var(products)
#  3 - Data Population ----------------------------------------------------
population <- vroom::vroom("neiss/population.tsv")
# 3.1 - Quick analysis ----------------------------------------------------------
describe(population)
summary(population)
skimr::skim(population)
naniar::gg_miss_var(population)
prod_codes <- setNames(products$prod_code, products$title)
prod_codes
products$title
products$prod_code
prod_codes <- setNames(products$prod_code, products$title)
prod_codes
###################################################################################################
#  Creador: José Eduardo Martínez Téllez
#  Fecha: Julio-2022
#   Titulo:  Learning Shiny
#  Descr: Chapter 04 Case Study - Mastering Shiny
###################################################################################################
# Package -----------------------------------------------------------------
pacman::p_load(shiny, vroom, tidyverse, psych, naniar,
magrittr, janitor, BBmisc, clipr, skimr)
# Exporting data --------------------------------------------------------------------
# dir.create("neiss")
# download <- function(name) {
#   url <- "https://github.com/hadley/mastering-shiny/raw/master/neiss/"
#   download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
# }
# download("injuries.tsv.gz")
# download("population.tsv")
# download("products.tsv")
# 1 - Data Injuries -------------------------------------------------------
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
# 1.1 - Quick analysis ----------------------------------------------------------
describe(injuries)
summary(injuries)
skimr::skim(injuries)
naniar::gg_miss_var(injuries)
#  2 - Data Productos -----------------------------------------------------
products <- vroom::vroom("neiss/products.tsv")
# 2.1 - Quick analysis ----------------------------------------------------------
describe(products)
summary(products)
skimr::skim(products)
naniar::gg_miss_var(products)
#  3 - Data Population ----------------------------------------------------
population <- vroom::vroom("neiss/population.tsv")
# 3.1 - Quick analysis ----------------------------------------------------------
describe(population)
summary(population)
skimr::skim(population)
naniar::gg_miss_var(population)
# ui ----------------------------------------------------------------------
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product", choices = prod_codes)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
# server ------------------------------------------------------------------
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(
selected() %>% count(diag, wt = weight, sort = TRUE)
)
output$body_part <- renderTable(
selected() %>% count(body_part, wt = weight, sort = TRUE)
)
output$location <- renderTable(
selected() %>% count(location, wt = weight, sort = TRUE)
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
shinyApp(ui, server)
shinyApp(ui, server)
###################################################################################################
#  Creador: José Eduardo Martínez Téllez
#  Fecha: Julio-2022
#   Titulo: Fctr Analysis
#  Descr:
###################################################################################################
pacman::p_load(tidyverse, magrittr, janitor,fastDummies, readxl,
psych, GPArotation)
# read_data ---------------------------------------------------------------
dt <- readxl::read_xlsx("LQL/Apuntes/Bases/Datos Factor Analysis.xlsx")
# Calculando número de factores -------------------------------------------
data <- as.data.frame(dt[,2:7])
ev <- eigen(cor(data))
# scree-plot --------------------------------------------------------------
dta_scree <- data.frame(  number = seq(1:6), eigen_values = ev$values)
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_hline(yintercept = 1, color = "red")+
labs(x = "Number of factors", y = "Eigen values",
title = "Screeplot")+
theme_minimal()
# parallel analysis -------------------------------------------------------
parallel <- fa.parallel(data)
dta_scree %>%
ggplot(aes(x= number, y = eigen_values))+
geom_point(shape = 1)+
geom_line() +
geom_hline(yintercept = 1, color = "red")+
labs(x = "Number of factors", y = "Eigen values",
title = "Screeplot")+
theme_minimal()
parallel <- fa.parallel(data)
count_top <- function(df, var, n = 5) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
shinyApp(ui, server)
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
}
shinyApp(ui, server)
